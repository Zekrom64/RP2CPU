<redforth.img>

// S stack is used for the FORTH value stack
// R stack is used for the FORTH call stack
// I points to the list of command addresses executing

_start:
0500: 18       | clc         // Clear emulation flag
0501: FB       | xce
0502: C2 30    | rep 0x30
0504: A9 00 03 | lda 0x300   // Set redbus window offset to 0x300
0507: EF 01    | mmu 0x01
0509: EF 02    | mmu 0x02    // Enable redbus
050B: A9 00 04 | lda 0x400   // Set external memory mapped window to 0x400
050E: EF 03    | mmu 0x03
0510: EF 04    | mmu 0x04    // Enable external memory mapped window
0512: A9 00 05 | lda 0x500   // Set Power-On address to 0x500
0515: EF 06    | mmu 0x06
0517: 4C 56 1D | jmp _func_COLD // Cold boot

// Push next operation, return
051A: 00
_ascii_DOCON:  | "DOCON"
051B: 44 4F 43 4F 4E 00 00 00 00
0524: DC       | tix         // Copy call list to X
0525: B5 00    | lda (X+0x00)// Load A with next call address
0527: 48       | pha         // Push call address to value stack
0528: 2B       | rli         // Pop call list from call stack and continue
0529: 02       | nxt

// Push current state, return
052A: 00 
_ascii_DOVAR:  | "DOVAR"
052B: 44 4F 56 41 52 00 00 24 05
_func_DOVAR:
0534: DC       | tix         // Push call list value
0535: DA       | phx
0536: 2B       | rli         // Pop call list and continue
0537: 02       | nxt         

// Pop return location and push value
0538: 00
_ascii_DODOES: | "DODOES"
0539: 44 4F 44 4F 45 53 00 00 34 05
0543: 3B       | rlx         // Pop return address, push value
0544: DA       | phx
0545: 02       | nxt

// Push next operation, continue
0546: 00
_ascii_lit:    | "(lit)"
0547: 28 6C 69 74 29 00 00 43 05
_func_lit:
0550: 42       | nxa         // Push next word
0551: 48       | pha         
0552: 02       | nxt         // Jump to next word

// Return
0553: 00
_ascii_EXIT:   | "EXIT"
0554: 45 58 49 54 00 00 50 05
_func_EXIT:
055C: 2B       | rli
055D: 02       | nxt 

// Jump to new call list given by next value
055E: 00
_ascii_branch: | "(branch)"
055F: 28 62 72 61 6E 63 68 29 00 00 5C 05
_func_branch:
056B: 42       | nxa
056C: AA       | tax
056D: 5C       | txi
056E: 02       | nxt

// Pop value, if zero jump to new call list given by next value
056F: 00
_ascii_qbranch:| "(?branch)"
0570: 28 3F 62 72 61 6E 63 68 29 00 00 6B 05 
_func_qbranch:
057D: 68       | pla
057E: 42       | nxa
057F: D0 02    | bne 0x02
0581: AA       | tax
0582: 5C       | txi
0583: 02       | nxt

0584: 00
_ascii_do:     | "(do)"
0585: 28 64 6F 29 00 00 7D 05
058D: 42       | nxa
058E: A3 02    | lda [S+0x02]
0590: 4B       | rha
0591: 68       | pla
0592: 38       | sec
0593: E3 00    | sbc [S+0x03]
0595: 4B       | rha
0596: 68       | pla
0597: 02       | nxt

0598: 00 
_ascii_qdo:    | "(?do)"
0599: 28 3F 64 6F 29 00 00 8D 05
05A2: 42       | nxa
05A3: AA       | tax
05A4: A3 02    | lda [S+0x02]
05A6: 4B       | rha
05A7: 68       | pla
05A8: 38       | sec
05A9: E3 00    | sbc [S+0x03]
05AB: F0 03    | beq _br_qdo_zero
05AD: 4B       | rha
05AE: 68       | pla
05AF: 02       | nxt
_br_loop_zero:
05B0: 6B       | rla
05B1: 68       | pla
05B2: 5C       | txi
05B3: 02       | nxt

05B4: 00
_ascii_loop:   | "(loop)"
05B5: 28 6C 6F 6F 70 29 00 00 A2 05
05BF: 42       | nxa
05C0: AA       | tax
05C1: A7 00    | lda [R+0x00]
05C3: 1A       | inc A
05C4: 47 00    | eor [R+0x00]
05C6: 89 00 80 | bit 0x8000
05C9: D0 01    | bne _br_qloop_nzero
05CB: 5C       | txi
_br_qloop_nzero:
05CC: A7 00    | lda [R+0x00]
05CE: 1A       | inc A
05CF: 87 00    | sta [R+0x00] 
05D1: 02       | nxt

05D2: 00
_ascii_ploop:  | "(+loop)"
05D3: 28 2B 6C 6F 6F 70 29 00 00 BF 05
05DE: 42       | nxa
05DF: AA       | tax
05E0: A3 00    | lda [S+0x00]
05E2: 18       | clc
05E3: 67 00    | adc [R+0x00]
05E4: 47 00    | eor [R+0x00]
05E6: 89 00 80 | bit 0x8000
05E9: D0 01    | bne 0x01
05EB: 5C       | txi
05EC: 18       | clc
05ED: 68       | pla
05EE: 67 00    | adc [R+0x00]
05F1: 87 00    | sta [R+0x00]
05F3: 02       | nxt

05F4: 00
_ascii_leave:  | "(leave)"
05F5: 28 6C 65 61 76 65 29 00 00 DE 05
0600: 6B       | pla
0601: 6B       | pla
0602: 42       | nxa
0603: A8       | tay
0604: B6 00    | ldx (Y+0x00)
0606: 5C       | txi
0607: 8A       | txa
0608: 02       | nxt

0609: 00 
_ascii_UNLOOP: | "UNLOOP"
060A: 55 4E 4C 4F 4F 50 00 00 00 06
0614: 6B       | pla
0615: 6B       | pla
0616: 02       | nxt

// Pushes the sum of the next two return locations
0617: 00
_ascii_I:      | "I"
0618: 49 00 00 14 06 
061D: A7 00    | lda [R+0x00]// A = return location
061F: 18       | clc
0620: 67 02    | adc [R+0x02]// Add 2nd level return location
0622: 48       | pha         // Push value
0623: 02       | nxt

// Pushes the sum of the second and third return locations
0624: 00
_ascii_J:      | "J"
0625: 4A 00 00 1D 06 
062A: A7 04    | lda [R+0x04]
062C: 18       | clc
062D: 67 06    | adc [R+0x06]
062F: 48       | pha
0630: 02       | nxt

// Pops a value and does a raw jump to it
0631: 00
_ascii_EXECUTE:| "EXECUTE" 
0632: 45 58 45 43 55 54 45 00 00 2A 06 
063D: FA       | plx
063E: CA       | dex
063F: DA       | phx
0640: 60       | rts


// Duplicates the value on the stack
0641: 00
_ascii_DUP:    | "DUP"
0642: 44 55 50 00 00 3D 06
_func_DUP:
0649: A3 00    | lda [S+0x00]
064B: 48       | pha
064C: 02       | nxt

// Duplicates the value on the stack if its not zero
064D: 00 
_ascii_qDUP:   | "?DUP"
064E: 3F 44 55 50 00 00 49 06
_func_qDUP:
0656: A3 00    | lda [S+0x00]
0658: F0 01    | beq 0x01
065A: 48       | pha
065B: 02       | nxt

// Duplicates the two values on top of the stack
065C: 00
_ascii_2DUP:   | "2DUP"
065D: 32 44 55 50 00 00 56 06
_func_2DUP:
0665: A3 02    | lda [S+0x02]
0667: 48       | pha
0668: A3 02    | lda [S+0x02]
0669: 48       | pha
066A: 02       | nxt

// Pops the stack
066B: 00
_ascii_DROP:   | "DROP"
066C: 44 52 4F 50 00 00 65 06
_func_DROP:
0675: 68       | pla
0676: 02       | nxt

// Pops 2 values from the stack
0677: 00
_ascii_2DROP:
0678: 32 44 52 4F 50 00 00 75 06
0681: 68       | pla
0682: 68       | pla
0683: 02       | nxt

// Swaps the two values on top of the stack
0684: 00
_ascii_SWAP:   | "SWAP"
0685: 53 57 41 50 00 00 81 06 
_func_SWAP:
068D: 68       | pla
068E: FA       | plx
068F: 48       | pha
0690: DA       | phx
0691: 02       | nxt

// Pops a value 'x', reads the value x elements into the stack, and pushes it
0692: 00
_ascii_PICK:   | "PICK
0693: 50 49 43 4B 00 00 8D 06 
069B: 68       | pla         // Pop value, *2, add 2
069C: 18       | clc
069D: 2A       | rol A
069E: 18       | clc 
069F: 69 02 00 | adc 0x0002
06A2: 48       | pha         // Push modified value
06A3: BA       | tsx         // Read value from stack
06A4: 9B       | txy
06A5: B3 00    | lda [Y+[S+0x00]]
06A7: 83 00    | sta [S+0x00]// Overwrite top
06A9: 02       | nxt

// Reads the value below the top of the stack, and pushes it
06AA: 00 
_ascii_OVER:   | "OVER"
06AB: 4F 56 45 52 00 00 9B 06
06B3: A3 02    | lda [S+0x02]
06B5: 48       | pha
06B6: 02       | nxt

// Reads the value 2 values deep into the stack, and pushes it
06B7: 00
_ascii_2OVER:  | "2OVER"
06B8: 32 4F 56 45 52 00 00 B3 06
_func_2OVER:
06C1: A3 04    | lda [S+0x04]
06C2: 48       | pha
06C3: 02       | nxt

// Rotates the top 3 values: S[0] -> S[1] S[1] -> S[2] S[2] -> S[0]
06C4: 00
_ascii_ROT:    | "ROT"
06C5: 52 4F 54 00 00 C1 06 
06CD: 68       | pla 
06CE: FA       | plx
06CF: 7A       | ply
06D0: DA       | phx
06D1: 48       | pha
06D2: 5A       | phy
06D3: 02       | nxt

// Swaps two pairs of two values on top of the stack
06D4: 00
_ascii_2SWAP:  | "2SWAP"
06D5: 32 53 57 41 50 00 00 CD 06
06DE: A3 06    | lda [S+0x06]
06E0: AA       | tax
06E1: A3 02    | lda [S+0x02]
06E3: 83 06    | sta [S+0x06]
06E5: 8A       | txa
06E6: 83 02    | sta [S+0x02]
06E8: A3 04    | lda [S+0x04]
06EA: AA       | tax
06EB: A3 00    | lda [S+0x00]
06ED: 83 04    | sta [S+0x04]
06EF: 8A       | txa
06F0: 83 00    | sta [S+0x00]
06F2: 02       | nxt

// Idenditcal to 'ROT', but rotates out of the stack instead
06F3: 00
_ascii_nROT:   | "-ROT"
06F4: 2D 52 4F 54 00 00 DE 06 
06FC: 68       | pla
06FD: FA       | plx
06FE: 7A       | ply
06FF: 48       | pha
0700: 5A       | phy
0701: DA       | phx
0702: 02       | nxt

// Removes the value below the top of the stack
0703: 00 
_ascii_NIP:    | "NIP"
0704: 4E 49 50 00 00 FC 06
_func_NIP:
070B: 68       | pla
070C: FA       | plx
070D: 48       | pha
070E: 02       | nxt

// Pops two values, pushes the top value, then pushes the two values back
070F: 00
_ascii_TUCK:   | "TUCK"
0710: 54 55 43 4B 00 00 0B 07
_func_TUCK:
0718: 68       | pla
0719: FA       | plx
071A: 48       | pha
071B: DA       | phx
071C: 48       | pha
071D: 02       | nxt

// Pops a value and pushes it to the R stack
071E: 00
_ascii_gtR:    | ">R"
071F: 3E 52 00 00 18 07
_func_gtR:
0725: 68       | pla
0726: 4B       | rha
0727: 02       | nxt

// Pops the R stack and pushes the value
0728: 00
_ascii_Rgt:    | "R>"
0729: 52 3E 00 00 25 07
_func_Rgt:
072F: 6B       | rla
0730: 48       | pha
0731: 02       | nxt

// Store value at S[1] to address S[0], pop both
0732: 00 
_ascii_exclamation: | "!"
0733: 21 00 00 2F 07
_func_exclamation:
0738: FA       | plx         // Pop X
0739: 68       | pla         // Pop A
073A: 95 00    | sta (X+0x00) // Store A to [X]
073C: 02       | nxt         // PC = [0x1D61] = 0x550, I += 2

// Add value S[1] to value at address S[0], pop both
073D: 00
_ascii_pexclamation: | "+!"
073E: 2B 21 00 00 38 07
0744: FA       | plx
0745: 68       | pla 
0746: 18       | clc
0747: 75 00    | adc (X+0x00)
0749: 95 00    | sta (X+0x00)
074B: 02       | nxt

// Subtract value S[1] to value at address S[0], pop both
074C: 00 
_ascii_nexclamation: | "-!"
074D: 2D 21 00 00 44 07
0753: FA       | plx
0754: 38       | sec
0755: B5 00    | lda (X+0x00)
0757: E3 00    | sbc [S+0x00]
0759: 95 00    | sta (X+0x00)
075B: 68       | pla
075C: 02       | nxt

// Store 8-bit value at S[1] to address S[0], pop both
075D: 00
_ascii_Cexclamation: | "C!"
075E: 43 21 00 00 53 07 
_func_Cexclamation:
0764: FA       | plx
0765: 68       | pla
0766: E2 20    | sep 0x20
0768: 95 00    | sta (X+0x00)
076A: C2 20    | rep 0x20
076C: 02       | nxt 

// Pop variable, then push its value
076D: 00
_ascii_at:     | "@"
076E: 40 00 00 64 07
_func_at:
0773: FA       | plx
0774: B5 00    | lda [X+0x00]
0776: 48       | pha
0777: 02       | nxt

// Pop variable, then push its 8-bit value
0778: 00
_ascii_Cat:    | "C@"
0779: 43 40 00 00 73 07 
_func_Cat:
077F: FA       | plx         // Pop X = A = [0x1D59]
0780: E2 20    | sep 0x20    // Set M flag
0782: B5 00    | lda [X+0x00] // Load A[0] and zero extend
0784: 8F       | zea
0785: C2 20    | rep 0x20    // Clear M flag
0787: 48       | pha         // Push A
0788: 02       | nxt

// Pops a value, then adds it to the value on top of the stack
0789: 00
_ascii_plus:   | "+"
078A: 2B 00 00 7F 07 
_func_plus:
078F: 68       | pla
0790: 18       | clc
0791: 63 00    | adc [S+0x00]
0793: 83 00    | sta [S+0x00]
0795: 02       | nxt

// Subtracts S[0] from S[1], pops both, and pushes the result
0796: 00
_ascii_minus:  | "-"
0797: 2D 00 00 8F 07
079C: A3 02    | lda [S+0x02]
079E: 38       | sec
079F: E3 00    | sbc [S+0x00]
07A1: 83 02    | sta [S+0x02]
07A3: 68       | pla
07A4: 02       | nxt

07A5: 00
_ascii_Mstar:  | "M*"
07A6: 4D 2A 00 00 9C 07
_func_Mstar:
07AC: 68       | pla
07AD: BA       | tsx
07AE: 38       | sec
07AF: 1F 00    | mul (X+0x00)
07B1: FA       | plx
07B2: 48       | pha
07B3: DF       | phd
07B4: 02       | nxt

07B5: 00
_ascii_UMstar: | "UM*"
07B6: 55 4D 2A 00 00 AC 07
07BD: 68       | pla
07BE: BA       | tsx
07BF: 18       | clc
07C0: 1F 00    | mul (X+0x00)
07C2: FA       | plx
07C3: 48       | pha
07C4: DF       | phd
07C5: 02       | nxt

07C6: 00
_ascii_star:   | "*"
07C7: 2A 00 00 BD 07
07CC: 68       | pla
07CD: BA       | tsx
07CE: 38       | sec
07CF: 1F 00    | mul (X+0x00)
07D1: FA       | plx
07D2: 48       | pha
07D3: 02       | nxt

07D4: 00
_ascii_Ustar:  | "U*"
07D5: 55 2A 00 00 CC 07
07DB: 68       | pla
07DC: BA       | tsx
07DD: 18       | clc
07DE: 1F 00    | mul (X+0x00)
07E0: FA       | plx
07E1: 48       | pha
07E2: 02       | nxt

// Divides double-word S[1:2] by S[0], pops 3 values, pushes the remainder and quotient
07E3: 00
_ascii_SMslashREM: | "SM/REM"
07E4: 53 4D 2F 52 45 4D 00 00 DB 07
07EE: FA       | plx
07EF: CF       | pld
07F0: 68       | pla
07F1: DA       | phx
07F2: BA       | tsx
07F3: 38       | sec
07F4: 5F 00    | div (X+0x00)
07F6: FA       | plx
07F7: DF       | phd
07F8: 48       | pha
07F9: 02       | nxt

07FA: 00
_ascii_FMslashMOD: | "FM/MOD"
07FB: 46 4D 2F 4D 4F 44 00 00 EE 07
0805: FA       | plx
0806: CF       | pld
0807: 68       | pla
0808: DA       | phx
0809: BA       | tsx
080A: 38       | sec
080B: 5F 00    | div (X+0x00)
080D: FA       | plx
080E: DF       | phd
080F: 48       | pha
0810: AF       | tda
0811: F0 11    | beq 0x11
0813: DA       | phx
0814: 43 00    | eor [S+0x00]
0816: 89 00 80 | bit 0x8000
0818: F0 0A    | beq 0x0A
081B: 68       | pla
081C: 18       | clc
081D: 63 02    | adc [S+0x02]
081F: 83 02    | sta [S+0x02]
0821: BA       | tsx
0822: D6 00    | dec (X+0x00)
0824: 02       | nxt
0825: FA       | plx
0826: 02       | nxt

0827: 00
_ascii_UMslashMOD: | "UM/MOD"
0828: 55 4D 2F 4D 4F 44 00 00 05 08
0832: FA       | plx
0833: CF       | pld
0834: 68       | pla
0835: DA       | phx
0836: BA       | tsx
0837: 18       | clc
0838: 5F 00    | div (X+0x00)
083A: FA       | plx
083B: DF       | phd
083C: 48       | pha
083D: 02       | nxt

083E: 00
_ascii_2star:  | "2*"
083F: 32 2A 00 00 32 08
0845: 68       | pla
0846: 18       | clc
0847: 2A       | rol A
0848: 48       | pha
0849: 02       | nxt

084A: 00
_ascii_2slash: | "2/"
084B: 32 2F 00 00 45 08
0851: A3 00    | lda [S+0x00]
0853: 2A       | rol A
0854: 68       | pla
0855: 6A       | ror A
0856: 48       | pha
0857: 02       | nxt

0858: 00
_ascii_Ugtgt:  | "U>>"
0859: 55 3E 3E 00 00 51 08
0860: 7A       | ply
0861: 68       | pla
0862: 18       | clc
0863: 6A       | ror A
0864: 88       | dey
0865: D0 FB    | bne 0xFB
0867: 48       | pha
0868: 02       | nxt

0869: 00
_ascii_ltlt:   | "<<"
086A: 3C 3C 00 00 60 08
0870: 7A       | ply
0871: 68       | pla
0872: C0 00 00 | cpy 
0875: F0 05    | beq 0x05
0877: 18       | clc
0878: 2A       | rol A
0879: 88       | dey
087A: D0 FB    | bne 0xFB
087C: 48       | pha
087D: 02       | nxt

// Pops two values, pushes the bitwise AND of the values
087E: 00
_ascii_AND:    | "AND"
087F: 41 4E 44 00 00 70 08
_func_AND:
0886: 68       | pla
0887: 23 00    | and [S+0x00]
0889: 83 00    | sta [S+0x00]
088B: 02       | nxt

088C: 00
_ascii_OR:     | "OR"
088D: 4F 52 00 00 86 08
0893: 68       | pla
0894: 03 00    | ora [S+0x00]
0896: 83 00    | sta [S+0x00]
0898: 02       | nxt

0899: 00
_ascii_XOR:    | "XOR"
089A: 58 4F 52 00 00 93 08
08A1: 68       | pla
08A2: 43 00    | eor [S+0x00]
08A4: 83 00    | sta [S+0x00]
08A6: 02       | nxt

08A7: 00
_ascii_INVERT: | "INVERT"
08A8: 49 4E 56 45 52 54 00 00 A1 08
_func_INVERT:
08B2: 68       | pla
08B3: 49 FF FF | xor 0xFFFF
08B6: 48       | pha
08B7: 02       | nxt

08B8: 00
_ascii_NEGATE: | "NEGATE"
08B9: 4E 45 47 41 54 45 00 00 B2 08
08C3: 68       | pla
08C4: 49 FF FF | xor 0xFFFF
08C7: 1A       | inc A
08C8: 48       | pha
08C9: 02       | nxt

08CA: 00
_ascii_oneplus: | "1+"
08CB: 31 2B 00 00 C3 08 
_func_oneplus:
08D1: 68       | pla
08D2: 1A       | inc A
08D3: 48       | pha
08D4: 02       | nxt

08D5: 00
_ascii_oneminus: | "1-"
08D6: 31 2D 00 00 D1 08
08DC: 68       | pla
08DD: 3A       | dec A
08DE: 48       | pha
08DF: 02       | nxt

08E0: 00
_ascii_SPat:   | "SP@"
08E1: 53 50 40 00 00 DC 08
08E8: BA       | tsx
08E9: DA       | phx
08EA: 02       | nxt

08EB: 00
_ascii_SPexclamation: | "SP!"
08EC: 53 50 21 00 00 E8 08
08F3: FA       | plx
08F4: 9A       | txs
08F5: 02       | nxt

08F6: 00
_ascii_RPat:   | "RP@"
08F7: 52 50 40 00 00 F3 08
08FE: AB       | trx
08FF: DA       | phx
0900: 02       | nxt

0901: 00
_ascii_RPexclamation: | "RP!"
0902: 52 50 21 00 00 FE 08
0909: FA       | plx
090A: 8B       | txr
090B: 02       | nxt

// Pops a value, if equal to zero pushes 0xFFFF, else pushes 0x0000
090C: 00
_ascii_zeroeq: | "0="
090D: 30 3D 00 00 09 09
_func_zeroeq:
0913: 68       | pla
0914: F0 04    | beq 0x04
0916: F4 00 00 | pea 0x0000
0919: 02       | nxt
091A: F4 FF FF | pea 0xFFFF
091D: 02       | nxt

// Pops a value, if not equal to zero pushes 0xFFFF, else pushes 0x0000
091E: 00
_ascii_zeroltgt: | "0<>"
091F: 30 3C 3E 00 00 13 09
_func_zeroltgt:
0926: 68       | pla
0927: F0 04    | beq 0x04
0929: F4 FF FF | pea 0xFFFF
092C: 02       | nxt
092D: 48       | pha
092E: 02       | nxt

// Pops a value, if less than zero pushes 0xFFFF, else pushes 0x0000
092F: 00
_ascii_zerolt: | "0<"
0930: 30 3C 00 00 26 09
0936: 68       | pla
0937: 30 04    | bmi 0x04
0939: F4 00 00 | pea 0x0000
093C: 02       | nxt
093D: F4 FF FF | pea 0xFFFF
0940: 02       | nxt

// Pops two values, pushes 0x0000 if equal, else pushes 0xFFFF
0941: 00
_ascii_ltgt:   | "<>"
0942: 3C 3E 00 00 36 09
_func_ltgt:
0948: 68       | pla
0949: C3 00    | cmp [S+0x00]
094B: F0 05    | beq 0x05
094D: 68       | pla
094E: F4 FF FF | pea 0xFFFF
0951: 02       | nxt
0952: 68       | pla
0953: F4 00 00 | pea 0x0000
0956: 02       | nxt

// Pops two values, pushes 0xFFFF if the top is greater, else pushes 0x0000
0957: 00
_ascii_lt:     | "<"
09F8: 3C 00 00 48 09
_func_lt:
095D: 68       | pla
095E: C3 00    | cmp [S+0x00]
0960: 30 07    | bmi 0x07
0962: F0 05    | beq 0x05
0964: 68       | pla
0965: F4 FF FF | pea 0xFFFF
0968: 02       | nxt
0969: 68       | pla
096A: F4 00 00 | pea 0x0000
096D: 02       | nxt

// Pops two values, pushes 0xFFFF if the top is less, else pushes 0x0000
096E: 00
_ascii_gt:     | ">"
096F: 3E 00 00 5D 09
_func_gt:
0974: 68       | pla
0975: C3 00    | cmp [S+0x00]
0977: 30 05    | bmi 0x05
0979: 68       | pla
097A: F4 00 00 | pea 0x0000
097D: 02       | nxt
097E: 68       | pla
097F: F4 FF FF | pea 0xFFFF
0982: 02       | nxt

0983: 00
_ascii_Ult:    | "U<"
0984: 55 3C 00 00 74 09
098A: 68       | pla
098B: C3 00    | cmp [S+0x00]
098D: 90 07    | bcc 0x07
098F: F0 05    | beq 0x05
0991: 68       | pla
0992: F4 FF FF | pea 0xFFFF
0995: 02       | nxt
0996: 68       | pla
0997: F4 00 00 | pea 0xFFFF
099A: 02       | nxt

099B: 00
_ascii_Ugt:    | "U>"
099C: 55 3E 00 00 8A 09
09A2: 68       | pla
09A3: C3 00    | cmp [S+0x00]
09A5: 90 05    | bcc 0x05
09A7: 68       | pla
09A8: F4 00 00 | pea 0x0000
09AB: 02       | nxt
09AC: 68       | pla
09AD: F4 FF FF | pea 0xFFFF
09B0: 02       | nxt

09B1: 00
_ascii_ltequals: | "<="
09B2: 3C 3D 00 00 A2 09
09B8: 68       | pla
09B9: C3 00    | cmp [S+0x00]
09BB: 30 05    | bmi 0x05
09BD: 68       | pla
09BE: F4 FF FF | pea 0xFFFF
09C1: 02       | nxt
09C2: 68       | pla
09C3: F4 00 00 | pea 0x0000
09C6: 02       | nxt

09C7: 00
_ascii_gtequals: | ">="
09C8: 3E 3D 00 00 B8 09
09CE: 68       | pla
09CF: C3 00    | cmp [S+0x0]
09D1: 30 07    | bmi 0x07
09D3: F0 05    | beq 0x05
09D5: 68       | pla
09D6: F4 00 00 | pea 0x0000
09D9: 02       | nxt
09DA: 68       | pla
09DB: F4 FF FF | pea 0xFFFF
09DE: 02       | nxt

// Pops two values, pushes 0xFFFF if equal, else pushes 0x0000
09DF: 00
_ascii_equals: | "="
09E0: 3D 00 00 CE 09
_func_equals:
09E5: 68       | pla
09E6: C3 00    | cmp [S+0x00]
09E8: F0 05    | beq 0x05
09EA: 68       | pla
09EB: F4 00 00 | pea 0x0000
09EE: 02       | nxt
09EF: 68       | pla
09F0: F4 FF FF | pea 0xFFFF
09F3: 02       | nxt

09F4: 00 43 45 4C 4C 00 00 E5 09 F4 02 00
0A00: 02 00 43 45 4C 4C 53 00 00 FD 09 68 18 2A 48 02
0A10: 00 4D 41 58 00 00 0B 0A 68 C3 00 30 02 83 00 02

// Pops two values, pushes the minimum value
0A20: 00
_ascii_MIN:    | "MIN"
0A21: 4D 49 4E 00 00 18 0A
_func_MIN:
0A28: 68       | pla
0A29: C3 00    | cmp [S+0x00]
0A2B: 10 02    | bpl 0x02
0A2D: 83 00    | sta [S+0x00]
0A2F: 02       | nxt

0A30: 00 4D 4F 56 45 00 00 28 0A 0B 68 7A FA 5C BB A8
0A40: F0 0B E2 20 42 95 00 E8 88 D0 F9 C2 20 2B 02 00
0A50: 46 49 4C 4C 00 00 39 0A 68 7A FA C0 00 00 F0 0A
0A60: E2 20 95 00 E8 88 D0 FA C2 20 02

0A6B: 00
_ascii_MEMCMP: | "MEMCMP"
0A6C: 4D 45 4D 43 4D 50 00 00 58 0A
_func_MEMCMP:
0A76: 0B       | rhi
0A77: 68       | pla
0A78: 7A       | ply
0A79: FA       | plx
0A7A: 5C       | txi
0A7B: BB       | tyx
0A7C: A8       | tay
0A7D: F0 0D    | beq _br_MEMCMP_equal
0A7F: E2 20    | sep 0x20
_br_MEMCMP_loop:
0A81: 42       | nxa
0A82: D5 00    | cmp [X+0x00]
0A84: D0 0B    | bne 0x0B
0A86: E8       | inx
0A87: 88       | dey
0A88: D0 F7    | bne _br_MEMCMP_loop
0A8A: C2 20    | rep 0x20
_br_MEMCMP_equal:
0A8C: 2B       | rli
0A8D: F4 00 00 | pea 0x0000
0A90: 02       | nxt
0A91: C2 20    | rep 0x20
0A93: 2B       | rli
0A94: 30 04    | bmi _br_MEMCMP_less
_br_MEMCMP_greater:
0A96: F4 01 00 | pea 0x0001
0A99: 02       | nxt
_br_MEMCMP_less:
0A9A: F4 FF FF | pea 0xFFFF
0A9D: 02       | nxt

// Pops a string address, pushes the length of the string
0A9E: 00
_ascii_STRLEN: | "STRLEN"
0A9F: 53 54 52 4C 45 4E 00 00 76 0A
_func_STRLEN:
0AA9: A3 00    | lda [S+0x00]
0AAB: AA       | tax
0AAC: A9 00 00 | lda 0x0000
0AAF: E2 20    | sep 0x20
0AB1: D5 00    | cmp (X+0x00)
0AB3: F0 03    | beq 0x03
0AB5: E8       | inx
0AB6: 80 F9    | bra 0xF9
0AB8: C2 20    | rep 0x20
0ABA: 8A       | txa
0ABB: 38       | sec
0ABC: E3 00    | sbc [S+0x00]
0ABE: 83 00    | sta [S+0x00]
0AC0: 02       | nxt

0AC1: 00 52 53 54 52 4C 45 4E 00 00 A9 0A A3 00 AA
0AD0: A9 00 00 E2 20 D5 00 F0 03 CA 80 F9 C2 20 68 DA
0AE0: 38 E3 00 83 00 02 00 54 52 55 45 00 00 CD 0A 22
0AF0: 24 05 FF FF 00 46 41 4C 53 45 00 00 EF 0A 22 24
0B00: 05 00 00 00 53 43 52 41 54 43 48 00 00 FE 0A 22
0B10: 24 05 40 00 00 54 49 42 00 00 0F 0B 22 24 05 80
0B20: 00 00 52 41 44 49 58 00 00 1C 0B 22 34 05 0A 00
0B30: 00 42 4C 00 00 2B 0B 22 24 05 20 00 00 55 49 54
0B40: 4F 41 00 00 37 0B 22 0F 0B 50 05 14 00 8F 07 50
0B50: 05 00 00 B3 06 64 07 DC 08 8D 06 50 05 00 00 2B
0B60: 0B 73 07 32 08 FC 06 50 05 30 00 8F 07 49 06 50
0B70: 05 39 00 74 09 7D 05 7F 0B 50 05 07 00 8F 07 B3
0B80: 06 64 07 B3 06 13 09 7D 05 57 0B 0B 07 5C 05 00
0B90: 57 4F 52 44 00 00 46 0B 22 49 06 7F 07 49 06 50
0BA0: 05 20 00 E5 09 B3 06 50 05 09 00 E5 09 93 08 B3
0BB0: 06 50 05 0A 00 E5 09 93 08 B3 06 50 05 0D 00 E5
0BC0: 09 93 08 0B 07 7D 05 CF 0B D1 08 6B 05 99 0B 49
0BD0: 06 7F 07 13 09 7D 05 DD 0B 49 06 5C 05 49 06 49
0BE0: 06 7F 07 49 06 50 05 20 00 48 09 B3 06 26 09 86
0BF0: 08 B3 06 50 05 09 00 48 09 86 08 B3 06 50 05 0A
0C00: 00 48 09 86 08 B3 06 50 05 0D 00 48 09 86 08 0B
0C10: 07 7D 05 1B 0C D1 08 6B 05 DF 0B 49 06 7F 07 7D
0C20: 05 2D 0C 50 05 00 00 B3 06 64 07 D1 08 8D 06 5C
0C30: 05

// Performs a string split operation:
// Pops a character codepoint, followed by a string address
// The string is iterated until the first occurence of a different character is found, this address is saved
// The string is then iterated until the first occurrence of the character or the string ends
// If the string end was not reached, the character at this location is set to NUL and the address incremented
// This new address is pushed first, and the first occurence address is pushed next
0C31: 00
_ascii_SPLIT:  | "SPLIT"
0C32: 53 50 4C 49 54 00 00 98 0B
_func_SPLIT:                                       // a b
0C3B: 22 8D 06 | ent _func_SWAP     // SWAP        // b a       // First occurence of B is found
0C3E: B3 06    | _func_OVER         // OVER        // b a b
0C40: B3 06    | _func_OVER         // OVER        // b a b a
0C42: 7F 07    | _func_Cat          // C@          // b a b [a]
0C44: E5 09    | _func_equals       // =           // b a b=[a]
0C46: 7D 05    | _func_qbranch      // (?branch)   // IF b!=[a] GOTO 0x0C50
0C48: 50 0C    | 0x0C50             //     0x0C50
0C4A: D1 08    | _func_oneplus      // 1+          // b a+1
0C4C: 6B 05    | _func_branch       // (branch)    // GOTO 0x0C3B
0C4E: 3E 0C    | 0x0C3E             //     0x0C3E

0C50: 18 07    | _func_TUCK         // TUCK        // a* b a*
0C52: B3 06    | _func_OVER         // OVER        // a* b a* b
0C54: B3 06    | _func_OVER         // OVER        // a* b a* b a*
0C56: 7F 07    | _func_Cat          // C@          // a* b a* b [a*]
0C58: 48 09    | _func_ltgt         // <>          // a* b a* b!=[a*]
0C5A: B3 06    | _func_OVER         // OVER        // a* b a* b!=[a*] a*
0C5C: 7F 07    | _func_Cat          // C@          // a* b a* b!=[a*] [a*]
0C5E: 26 09    | _func_zeroltgt     // 0<>         // a* b a* b!=[a*] [a*]!=0
0C60: 86 08    | _func_AND          // AND         // a* b a* (b!=[a*])&([a*]!=0)
0C62: 7D 05    | _func_qbranch      // (?branch)   // IF (b=[a])|([a]=0) GOTO 0x0C6C
0C64: 6C 0C    | 0x0C6C             //     0x0C6C
0C66: D1 08    | _func_oneplus      // 1+          // a* b a*+1
0C68: 6B 05    | _func_branch       // (branch)    // GOTO 0x0C52
0C6A: 52 0C    | 0x0C52             //     0x0C52

0C6C: 49 06    | _func_DUP          // DUP         // a* b a^ a^
0C6E: 7F 07    | _func_Cat          // C@          // a* b a^ [a^]
0C70: 7D 05    | _func_qbranch      // (?branch)   // IF [a^]=0 GOTO 0x0C7E
0C72: 7E 0C    | 0x0C7E             //     0x0C7E
0C74: 50 05    | _func_lit          // (lit)       // a* b a^ 0
0C76: 00 00    | 0x0000             //     0x0000
0C78: B3 06    | _func_OVER         // OVER        // a* b a^ 0 a^
0C7A: 64 07    | _func_Cexclamation // C!          // a* b a^
0C7C: D1 08    | _func_oneplus      // 1+          // a* b a^+1
0C7E: 0B 07    | _func_NIP          // NIP         // a* (a^+1)|a^
0C80: 8D 06    | _func_SWAP         // SWAP        // (a^+1)|a^ a*
0C82: 5C 05    | _func_EXIT         // EXIT

0C84: 00
_ascii_STRCMP: | "STRCMP"
0C85: 53 54 52 43 4D 50 00 00 3B 0C
_func_STRCMP:                             // a b
0C8F: 22 65 06 | ent _func_2DUP // DUP    // 
0C92: A9 0A    | _func_STRLEN   // STRLEN
0C94: 8D 06    | _func_SWAP     // SWAP
0C96: A9 0A    | _func_STRLEN   // STRLEN
0C98: 28 0A    | _func_MIN      // MIN
0C9A: D1 08    | _func_oneplus  // 1+
0C9C: 76 0A    | _func_MEMCMP   // MEMCMP
0C9E: 5C 05    | _func_EXIT     // EXIT

0CA0: 00 49 53 55 4E 55 4D 00 00 8F 0C 22 49 06 50 05
0CB0: 40 00 74 09 7D 05 BE 0C 50 05 07 00 9C 07 50 05
0CC0: 30 00 9C 07 49 06 36 09 8D 06 2B 0B 73 07 DC 08
0CD0: 74 09 93 08 13 09 5C 05 00 49 53 4E 55 4D 00 00
0CE0: AB 0C 22 49 06 AB 0C 8D 06 50 05 2D 00 E5 09 93
0CF0: 08 5C 05 00 55 41 54 4F 49 00 00 E2 0C 22 50 05
0D00: 00 00 B3 06 7F 07 49 06 50 05 40 00 74 09 7D 05
0D10: 18 0D 50 05 07 00 9C 07 50 05 30 00 9C 07 49 06
0D20: 36 09 B3 06 2B 0B 73 07 CE 09 93 08 13 09 7D 05
0D30: 46 0D 8D 06 2B 0B 73 07 DB 07 8F 07 8D 06 D1 08
0D40: 8D 06 6B 05 02 0D 75 06 0B 07 5C 05 00 41 54 4F
0D50: 49 00 00 FD 0C 22 49 06 7F 07 50 05 2D 00 E5 09
0D60: 7D 05 6E 0D D1 08 FD 0C C3 08 6B 05 70 0D FD 0C
0D70: 5C 05 00 48 45 58 00 01 55 0D 22 50 05 10 00 2B
0D80: 0B 38 07 5C 05 00 44 45 43 49 4D 41 4C 00 01 7A
0D90: 0D 22 50 05 0A 00 2B 0B 38 07 5C 05

// Waits until the next tick
0D9C: 00
_ascii_TICK:     | "TICK"
0D9D: 54 49 43 4B 00 00 91 0D
_func_TICK:
0DA5: CB         | wai
0DA6: 02         | nxt

// Pops a value and sets the current Redbus device to it
0DA7: 00
_ascii_RBPexclamation: | "RBP!"
0DA8: 52 42 50 21 00 00 A5 0D
_func_RBPexclamation:
0DB0: 68        | pla
0DB1: EF 00     | mmu 0x00
0DB3: 02        | nxt

0DB4: 00
_ascii_TERMADDR: | "TERMADDR"
0DB5: 54 45 52 4D 41 44 44 52 00 00 B0 0D
_func_TERMADDR:
0DC1: 22 34 05 | ent _func_DOVAR
_var_TERMADDR:
0DC4: 01 00    | 1      // Terminal device

0DC6: 00
_ascii_PAGE:   | "PAGE"
0DC7: 50 41 47 45 00 00 C1 0D
0DCF: 22 C1 0D | ent _func_TERMADDR   // TERMADDR
0DD2: 73 07    | _func_at             // @
0DD4: B0 0D    | _func_RBPexclamation // RBP!
0DD6: 50 05    | (lit)                // (lit)
0DD8: 00 00    | 0x0000               //     0x0000
0DDA: 50 05    | (lit)
0DDC: 03 03    | 0x0303
0DDE: 64 07    | _func_Cexclamation
0DE0: 50 05    | (lit)
0DE2: 20 00    | 0x0020
0DE4: 50 05    | (lit)
0DE6: 08 03    | 0x0308
0DE8: 64 07    | _func_Cexclamation
0DEA: 50 05    | (lit)
0DEC: 00 00    | 0x0000
0DEE: 50 05    | (lit)
0DF0: 0A 03    | 0x030A
0DF2: 38 07    | _func_exclamation
0DF4: 50 05    | (lit)
0DF6: 50 32    | 0x3250
0DF8: 50 05    | (lit)
0DFA: 0C 03    | 0x030C
0DFC: 38 07    | _func_exclamation
0DFE: 50 05    | (lit)
0E00: 01 00    | 0x0001
0E02: 50 05    | (lit)
0E04: 07 03    | 0x0307
0E06: 64 07    | _func_Cexclamation
0E08: 50 05    | (lit)
0E0A: 07 03    | 0x0307
0E0C: 7F 07    | _func_Cat
0E0E: 13 09    | _func_zeroeq
0E10: A5 0D    | _func_TICK
0E12: 7D 05    | _func_qbranch
0E14: 08 0E    | 0x0E08
0E16: 50 05    | (lit)
0E18: 01 00    | 0x0001
0E1A: 50 05    | (lit)
0E1C: 01 03    | 0x0301
0E1E: 38 07    | _func_exclamation
0E20: 50 05    | (lit)
0E22: 02 00    | 0x0002
0E24: 50 05    | (lit)
0E26: 03 03    | 0x0303
0E28: 64 07    | _func_Cexclamation
0E2A: 5C 05    | _func_EXIT

// Scrolls the screen by one line
0E2C: 00
_ascii_SCROLL: | "SCROLL"
0E2D: 53 43 52 4F 4C 4C 00 00 CF 0D
_func_SCROLL:
0E37: 22 C1 0D | ent _func_TERMADDR   // TERMADDR   // Select terminal
0E3A: 73 07    | _func_at             // @
0E3C: B0 0D    | _func_RBPexclamation // RBP!
0E3E: 50 05    | _func_lit            // (lit)      // Cursor mode = hidden
0E40: 00 00    | 0x0000               //     0x0000
0E42: 50 05    | _func_lit            // (lit)
0E44: 03 03    | 0x0303               //     0x0303
0E46: 64 07    | _func_Cexclamation   // C!
0E48: 50 05    | _func_lit            // (lit)      // Blit start X = 0
0E4A: 00 01    | 0x0001               //     0x0001
0E4C: 50 05    | _func_lit            // (lit)
0E4E: 08 03    | 0x0308               //     0x0308
0E50: 38 07    | _func_exclamation    // C!
0E52: 50 05    | _func_lit            // (lit)      // Blit X,Y offset = 0
0E54: 00 00    | 0x0000               //     0x0000
0E56: 50 05    | _func_lit            // (lit)
0E58: 0A 03    | 0x030A               //     0x030A
0E5A: 38 07    | _func_exclamation    // !
0E5C: 50 05    | _func_lit            // (lit)      // Blit width = 5, height = 0x30
0E5E: 50 31    | 0x3105               //     0x3105
0E60: 50 05    | _func_lit            // (lit)
0E62: 0C 03    | 0x30C                //     0x030C
0E64: 38 07    | _func_exclamation    // !
0E66: 50 05    | _func_lit            // (lit)      // Blit mode = shift
0E68: 03 00    | 0x0003               //     0x0003
0E6A: 50 05    | _func_lit            // (lit)
0E6C: 07 03    | 0x0307               //     0x0307
0E6E: 64 07    | _func_Cexclamation   // C!
0E70: 50 05    | _func_lit            // (lit)      // Loop while blit mode != 0
0E72: 07 03    | 0x0307               //     0x0307
0E74: 7F 07    | _func_Cat            // C@
0E76: 13 09    | _func_zeroeq         // 0=
0E78: A5 0D    | _func_TICK           // TICK
0E7A: 7D 05    | _func_qbranch        // (?branch)
0E7C: 70 0E    | 0x0E70               //     0x0E70
0E7E: 50 05    | _func_lit            // (lit)      // Blit start X = 0x20
0E80: 20 00    | 0x0020               //     0x0020
0E82: 50 05    | _func_lit            // (lit)
0E84: 08 03    | 0x0308               //     0x0308
0E86: 64 07    | _func_Cexclamation   // C!
0E88: 50 05    | _func_lit            // (lit)      // Blit X offset = 0, Y offset = 0x31
0E8A: 00 31    | 0x3100               //     0x3100
0E8C: 50 05    | _func_lit            // (lit)
0E8E: 0A 03    | 0x030A               //     0x030A
0E90: 38 07    | _func_exclamation    // !
0E92: 50 05    | _func_lit            // (lit)      // Blit width = 0x50, height = 0x01
0E94: 50 01    | 0x0150               //     0x0150
0E96: 50 05    | _func_lit            // (lit)
0E98: 0C 03    | 0x030C               //     0x030C
0E9A: 38 07    | _func_exclamation    // !
0E9C: 50 05    | _func_lit            // (lit)      // Blit mode = fill
0E9E: 01 00    | 0x0001               //     0x0001
0EA0: 50 05    | _func_lit            // (lit)
0EA2: 07 03    | 0x0307               //     0x0307
0EA4: 64 07    | _func_Cexclamation   // C!
0EA6: 50 05    | _func_lit            // (lit)      // Loop while blit mode != 0
0EA8: 07 03    | 0x0307               //     0x0307
0EAA: 7F 07    | _func_Cat            // C@
0EAC: 13 09    | _func_zeroeq         // 0=
0EAE: A5 0D    | _func_TICK           // TICK
0EB0: 7D 05    | _func_qbranch        // (?branch)
0EB2: A6 0E    | 0x0EA6               //     0x0EA6
0EB4: 50 05    | _func_lit            // (lit)      // Cursor mode = blink
0EB6: 02 00    | 0x0002               //     0x0002
0EB8: 50 05    | _func_lit            // (lit)
0EBA: 03 03    | 0x0303               //     0x0303
0EBC: 64 07    | _func_Cexclamation   // C!
0EBE: 5C 05    | _func_EXIT           // EXIT

0EC0: 00
_ascii_CR:     | "CR"
0EC1: 43 52 00 00 37 0E
_func_CR:
0EC7: 22 C1 0D | ent _func_TERMADDR   // TERMADDR
0ECA: 73 07    | _func_at             // @
0ECC: B0 0D    | _func_RBPexclamation // RBP!
0ECE: 50 05    | _func_lit            // (lit)
0ED0: 02 03    | 0x0302               //     0x0302
0ED2: 7F 07    | _func_Cat            // C@
0ED4: 50 05    | _func_lit            // (lit)
0ED6: 30 00    | 0x0030               //     0x0030
0ED8: 74 09    | _func_gt             // >
0EDA: 7D 05    | _func_qbranch        // (?branch)
0EDC: E4 0E    | 0x0EE4               //     0x0EE4
0EDE: 37 0E    | 
0EE0: 6B 05
0EE2: F2 0E
0EE4: 50 05
0EE6: 02 03
0EE8: 7F 07
0EEA: D1 08
0EEC: 50 05
0EEE: 02 03
0EF0: 64 07
0EF2: 50 05
0EF4: 00 00
0EF6: 50 05
0EF8: 01 03
0EFA: 64 07
0EFC: 5C 05    | _func_EXIT

0EFE: 00
_ascii_EMIT:   | "EMIT"
0EFF: 45 4D 49 54 00 00 C7 0E
_func_EMIT:
0F07: 22 C1 0D | ent _func_TERMADDR   // TERMADDR   // Select terminal
0F0A: 73 07    | _func_at             // @
0F0C: B0 0D    | _func_RBPexclamation // RBP!
0F0E: 50 05    | (lit)                // (lit)      // Read cursor Y
0F10: 02 03    | 0x0302               //     0x0302
0F12: 7F 07    | _func_Cat            // C@
0F14: 50 05    | (lit)                // (lit)      // Select memory access row
0F16: 00 03    | 0x0300               //     0x0300
0F18: 64 07    | _func_Cexclamation   // C!
0F1A: 50 05    | (lit)                // (lit)      // Increment cursor X
0F1C: 01 03    | 0x0301               //     0x0301
0F1E: 7F 07    | _func_Cat            // C@
0F20: 50 05    | (lit)                // (lit)
0F22: 10 03    | 0x0301               //     0x0301
0F24: 8F 07    | _func_plus           // +
0F26: 64 07    | _func_Cexclamation   // C!
0F28: 50 05    | (lit)                // (lit)      // IF Cursor X > 78 GOTO 0x0F3E
0F2A: 01 03    | 0x0301               //     0x0301
0F2C: 7F 07    | _func_Cat            // C@
0F2E: 50 05    | (lit)                // (lit)
0F30: 4E 00    | 0x004E               //     0x004E
0F32: 74 09    | _func_gt             // >
0F34: 7D 05    | _func_qbranch        // (?branch)
0F36: 3E 0F    | 0x0F3E               //     0x0F3E
0F38: C7 0E    | _func_CR             // CR         // New line
0F3A: 6B 05    | _func_branch         // (branch)
0F3C: 4C 0F    | 0x0F4C               //     0x0F4C // GOTO 0xF4C
0F3E: 50 05    | (lit)                // (lit)      // Increment cursor X
0F40: 01 03    | 0x0301               //     0x0301
0F42: 7F 07    | _func_Cat            // C@
0F44: D1 08    | _func_oneplus        // 1+
0F46: 50 05    | (lit)                // (lit)
0F48: 01 03    | 0x0301               //     0x0301
0F4A: 64 07    | _func_Cexclamation   // C!
0F4C: 5C 05    | _func_EXIT           // EXIT


0F4E: 00
_ascii_BS:
0F4F: 42 53 00 00 07 0F
_func_BS:
0F55: E2 20    | sep 0x20
0F57: AD C4 0D | lda [_var_TERMADDR]
0F5A: EF 00    | mmu 0x00
0F5C: AD 01 03 | lda [0x0301]
0F5F: F0 10    | beq 0x10
0F61: 3A       | dec A
0F62: 8D 01 03 | sta [0x0301]
0F65: AA       | tax
0F66: AD 02 03 | lda [0x0302]
0F69: 8D 00 03 | sta [0x0300]
0F6C: A9 20 9D | lda 0x9D20
0F6F: 10 03    | bpl 0x03
0F71: C2 20    | rep 0x20
0F73: 02       | nxt

0F74: 00
0F75: 4B 45 59 3F 00 00 55 0F E2 20 AD
0F80: C4 0D EF 00 AD 04 03 CD 05 03 C2 20 F0 04 F4 FF
0F90: FF 02 F4 00 00 02 00 4B 45 59 00 00 7D 0F E2 20
0FA0: AD C4 0D EF 00 AD 04 03 CD 05 03 D0 03 CB 80 F5
0FB0: AD 06 03 8F EE 04 03 C2 20 48 02 00 41 54 2D 58
0FC0: 59 00 00 9E 0F E2 20 AD C4 0D EF 00 FA 8A 8D 02
0FD0: 03 FA 8A 8D 01 03 C2 20 02

// Pops a string off the R stack
0FD9: 00
_ascii_lpdotquoterp: "(.\")"
0FDA: 28 2E 22 29 00 00 C5 0F
_func_lpdotquoterp:
0FE2: 22 2F 07 | ent _func_Rgt // R>         // R
0FE5: 49 06    | _func_DUP     // DUP        // R R
0FE7: 7F 07    | _func_Cat     // C@         // R C[R]
0FE9: 56 06    | _func_qDUP    // ?DUP       // R C[R] C[R]*
0FEB: 7D 05    | _func_qbranch // (?branch)  // IF C[R]=0 GOTO 0x0FF7
0FED: F7 0F    | 0x0FF7        //     0x0FF7
0FEE: 07 0F    | _func_EMIT    // EMIT
0FF1: D1 08    | _func_oneplus // 1+         // 
0FF3: 6B 05    | _func_branch  // (branch)
0FF5: E5 0F    | 0x0FE5        //     0x0FE5
0FF7: D1 08    | _func_oneplus // 1+         // R+1
0FF9: 25 07    | _func_gtR     // >R
0FFB: 5C 05    | _func_EXIT    // EXIT

0FFD: 00
_ascii_SPACE:
0FFE: 53 50 41 43 45 00 00 E2 0F
1007: 22 37 0B | ent 
100A: 07 0F
100C: 5C 05
100E: 00 54
1010: 59 50 45 00 00 07 10 22 49 06 7F 07 56 06 7D 05
1020: 2A 10 07 0F D1 08 6B 05 18 10 75 06 5C 05 00 2E
1030: 00 00 17 10 22 49 06 36 09 7D 05 4F 10 C3 08 46
1040: 0B DC 08 50 05 2D 00 B3 06 64 07 6B 05 51 10 46
1050: 0B 17 10 07 10 5C 05 00 55 2E 00 00 34 10 22 46
1060: 0B 17 10 07 10 5C 05 00 2F 4D 4F 44 00 00 5E 10
1070: 22 B3 06 36 09 8D 06 05 08 5C 05 00 2F 00 00 70
1080: 10 22 70 10 75 06 5C 05 00 4D 4F 44 00 00 81 10
1090: 22 70 10 0B 07 5C 05 00 41 42 4F 52 54 00 00 90
10A0: 10 22 78 16 F3 08 29 18

10A8: 00
_ascii_TIBPTR: | "TIBPTR"
10A9: 54 49 42 50 54 52 00 00 A1 10 
_func_TIBPTR
10B3: 22 34 05 | ent _func_DOVAR
10B6: 00 00    |             // TIBPTR value

10B8: 00
_ascii_VOCAB: "VOCAB"
10B9: 56 4F 43 41 42 00 00 B3 10
_func_VOCAB:
10C2: 22 34 05 | ent _func_DOVAR
10C5: 56 1D    | _func_COLD  // VOCAB value

10C7: 00
_ascii_lpHERErp: | "(HERE)"
10C8: 28 48 45 52 45 29 00 00 C2 10
_func_lpHERErp
10D2: 22 34 05 | ent _func_DOVAR
10D5: A7 1D    | _var_HERE   // HERE address

10D7: 00
_ascii_HERE:   | "HERE"
10D8: 48 45 52 45 00 00 D2 10
10E0: 22 D2 10 | ent _func_lpHERErp // (HERE)
10E3: 73 07    | _func_at           // @
10E5: 5C 05    | _func_EXIT         // EXIT

10E7: 00
_ascii_TO:     | "TOP"
10E8: 54 4F 50 00 00 E0 10
10EF: 22 34 05 | ent _func_DOVAR
_var_TOP:
10F2: 00 00    |             // TOP value

10F4: 00
_ascii_STATE:  | "STATE"
10F5: 53 54 41 54 45 00 00 EF 10
10FE: 22 34 05 | ent _func_DOVAR
_var_STATE:
1101: 00 00    |             // STATE value

1103: 00
_ascii_PROBE:  | "PROBE"
1104: 50 52 4F 42 45 00 00 FE 10
110D: 22 50 05 | ent _func_lit      // (lit)
1110: FF 1F    | 0x1FFF             //     0x1FFF
1112: 49 06    | _func_DUP          // DUP
1114: 50 05    | _func_lit          // (lit)
1116: 00 20    | 0x2000             //     0x2000
1118: 8F 07    | _func_plus         // +
111A: 49 06    | _func_DUP          // DUP
111C: 7F 07    | _func_Cat          // C@
111E: 49 06    | _func_DUP          // DUP
1120: B2 08    | _func_INVERT       // INVERT
1122: C1 06    | _func_2OVER        // 2OVER
1124: 38 07    | _func_exclamation  // !
1126: 49 06    | _func_DUP          // DUP
1128: C1 06    | _func_2OVER        // 2OVER
112A: 7F 07    | _func_Cat          // C@
112C: E5 09    | _func_equals       // =
112E: 8D 06    | _func_SWAP         // SWAP
1130: C1 06    | _func_2OVER        // 2OVER
1132: 64 07    | _func_Cexclamation // C!
1134: 7D 05    | _func_qbranch      // (?branch)
1136: 3C 11    | 0x113C             //     0x113C
1138: 75 06    | _func_DROP         // DROP
113A: 5C 05    | _func_EXIT         // EXIT
113C: 0B 07    | _func_NIP          // NIP
113E: 49 06    | _func_DUP          // DUP
1140: 50 05    | _func_lit          // (lit)
1142: FF FF    | 0xFFFF             //     0xFFFF
1144: E5 09    | _func_equals       // =
1146: 7D 05    | _func_qbranch      // (?branch)
1148: 12 11    | 0x1112             // 0x1112
114A: 5C 05    | _func_EXIT         // EXIT

114C: 00
114D: 46 52 45
1150: 45 00 00 0D 11 22 EF 10 73 07 E0 10 9C 07 5C 05
1160: 00 41 4C 4C 4F 54 00 00 55 11 22 49 06 50 05 02
1170: 00 8F 07 55 11 A2 09 7D 05 8F 11 E2 0F 4F 75 74
1180: 20 6F 66 20 6D 65 6D 6F 72 79 00 C7 0E A1 10 E0
1190: 10 8D 06 D2 10 44 07 5C 05 00 2C 00 00 6A 11 22
11A0: FD 09 6A 11 38 07 5C 05 00 2C 43 00 00 9F 11 22
11B0: 50 05 01 00 6A 11 64 07 5C 05 00 2C 53 00 00 AF
11C0: 11 22 49 06 7F 07 7D 05 D6 11 49 06 7F 07 AF 11
11D0: D1 08 6B 05 C2 11 75 06 50 05 00 00 AF 11 5C 05
11E0: 00 54 49 42 57 4F 52 44 00 00 C1 11 22 B3 10 73
11F0: 07 98 0B 8D 06 B3 10 38 07 5C 05

11FB: 00
_ascii_TIBSPLIT: | "TIBSPLIT"
11FC: 54 49 42 53 50 4C 49 54 00 00 EC 11
1208: 22 B3 10 | ent _func_TIBPTR
120B: 73 07    | _func_at    // @
120D: 8D 06    | _func_SWAP  // SWAP
120F: 3B 0C    | _func_SPLIT // SPLIT
1211: 8D 06 B3 10 38 07 5C 05 00 48 45 41 44 45 52
1220: 00 00 08 12 22 50 05 00 00 AF 11 EC 11 C1 11 50
1230: 05 00 00 AF 11 C2 10 73 07 9F 11 E0 10 C2 10 38
1240: 07 5C 05 00 43 4F 4E 53 54 41 4E 54 00 00 24 12
1250: 22 24 12 50 05 22 00 AF 11 50 05 24 05 9F 11 9F
1260: 11 5C 05 00 43 52 45 41 54 45 00 00 50 12 22 24
1270: 12 50 05 22 00 AF 11 50 05 34 05 9F 11 5C 05 00
1280: 56 41 52 49 41 42 4C 45 00 00 6E 12 22 6E 12 50
1290: 05 00 00 9F 11 5C 05 00 5B 00 00 8C 12 22 50 05
12A0: 01 00 FE 10 38 07 5C 05 00 5D 00 01 9D 12 22 50
12B0: 05 00 00 FE 10 38 07 5C 05 00 48 49 44 45 00 00
12C0: AE 12 22 C2 10 73 07 50 05 03 00 9C 07 49 06 7F
12D0: 07 50 05 02 00 93 08 8D 06 64 07 5C 05 00 52 45
12E0: 56 45 41 4C 00 00 C2 12 22 C2 10 73 07 50 05 03
12F0: 00 9C 07 49 06 7F 07 50 05 01 00 86 08 8D 06 64
1300: 07 5C 05 00 49 4D 4D 45 44 49 41 54 45 00 00 E8
1310: 12 22 C2 10 73 07 50 05 03 00 9C 07 49 06 7F 07
1320: 50 05 01 00 93 08 8D 06 64 07 5C 05 00 28 64 6F
1330: 65 73 29 00 00 11 13 22 2F 07 C2 10 73 07 D1 08
1340: 38 07 5C 05 00 44 4F 45 53 3E 00 01 37 13 22 50
1350: 05 37 13 9F 11 50 05 22 00 AF 11 50 05 43 05 9F
1360: 11 5C 05 00 3A 00 00 4E 13 22 24 12 C2 12 50 05
1370: 22 00 AF 11 9D 12 5C 05 00 3B 00 01 69 13 22 50
1380: 05 5C 05 9F 11 AE 12 E8 12 5C 05 00 49 46 00 01
1390: 7E 13 22 50 05 7D 05 9F 11 E0 10 50 05 00 00 9F
13A0: 11 50 05 00 00 5C 05 00 54 48 45 4E 00 01 92 13
13B0: 22 75 06 E0 10 8D 06 38 07 5C 05 00 45 4C 53 45
13C0: 00 01 B0 13 22 75 06 50 05 6B 05 9F 11 E0 10 50
13D0: 05 00 00 9F 11 8D 06 E0 10 8D 06 38 07 50 05 00
13E0: 00 5C 05 00 2E 22 00 01 C4 13 22 50 05 E2 0F 9F
13F0: 11 50 05 22 00 08 12 C1 11 5C 05 00 42 45 47 49
1400: 4E 00 01 EA 13 22 E0 10 50 05 00 00 5C 05 00 41
1410: 47 41 49 4E 00 01 05 14 22 75 06 50 05 6B 05 9F
1420: 11 9F 11 5C 05 00 55 4E 54 49 4C 00 01 18 14 22
1430: 75 06 50 05 7D 05 9F 11 9F 11 5C 05 00 57 48 49
1440: 4C 45 00 01 2F 14 22 50 05 7D 05 9F 11 E0 10 50
1450: 05 00 00 9F 11 50 05 00 00 5C 05 00 52 45 50 45
1460: 41 54 00 01 46 14 22 75 06 0B 07 8D 06 50 05 6B
1470: 05 9F 11 9F 11 E0 10 8D 06 38 07 5C 05 00 44 4F
1480: 00 01 66 14 22 50 05 8D 05 9F 11 E0 10 50 05 00
1490: 00 9F 11 E0 10 8D 06 5C 05 00 3F 44 4F 00 01 84
14A0: 14 22 50 05 A2 05 9F 11 E0 10 50 05 00 00 9F 11
14B0: E0 10 8D 06 5C 05 00 4C 4F 4F 50 00 01 A1 14 22
14C0: 8D 06 50 05 BF 05 9F 11 9F 11 50 05 14 06 9F 11
14D0: E0 10 8D 06 38 07 5C 05 00 2B 4C 4F 4F 50 00 01
14E0: BF 14 22 8D 06 50 05 DE 05 9F 11 9F 11 50 05 14
14F0: 06 9F 11 E0 10 8D 06 38 07 5C 05 00 4C 45 41 56
1500: 45 00 01 E2 14 22 50 05 01 00 49 06 9B 06 13 09
1510: 7D 05 1E 15 50 05 02 00 8F 07 6B 05 0A 15 50 05
1520: 00 06 9F 11 9B 06 50 05 02 00 9C 07 9F 11 5C 05
1530: 00 5C 00 01 05 15 22 50 05 0D 00 08 12 75 06 5C
1540: 05 00 28 00 01 36 15 22 50 05 29 00 08 12 75 06
1550: 5C 05 00 28 22 29 00 00 47 15 22 2F 07 49 06 49
1560: 06 7F 07 7D 05 6D 15 D1 08 6B 05 5F 15 D1 08 25
1570: 07 5C 05 00 22 00 01 5A 15 22 50 05 5A 15 9F 11
1580: 50 05 22 00 08 12 C1 11 5C 05 00 54 49 4D 45 53
1590: 00 01 79 15 22 FE 10 73 07 13 09 7D 05 BB 15 F1
15A0: 18 8D 06 50 05 00 00 A2 05 B5 15 49 06 3D 06 BF
15B0: 05 AB 15 14 06 75 06 6B 05 F1 15 F1 18 50 05 50
15C0: 05 9F 11 50 05 00 00 9F 11 50 05 A2 05 9F 11 E0
15D0: 10 50 05 0A 00 8F 07 9F 11 9F 11 E0 10 50 05 02
15E0: 00 9C 07 50 05 BF 05 9F 11 9F 11 50 05 14 06 9F
15F0: 11 5C 05 00 4C 49 54 45 52 41 4C 00 01 94 15 22
1600: F1 18 50 05 50 05 9F 11 9F 11 5C 05 00 50 4F 53
1610: 54 50 4F 4E 45 00 01 FF 15 22 F1 18 49 06 50 05
1620: 03 00 9C 07 7F 07 50 05 01 00 86 08 7D 05 36 16
1630: 9F 11 6B 05 3E 16 50 05 50 05 9F 11 9F 11 5C 05
1640: 00 52 45 43 55 52 53 45 00 01 19 16 22 C2 10 73
1650: 07 9F 11 5C 05 00 54 49 43 4B 53 00 00 4C 16 22
1660: 56 06 7D 05 6E 16 A5 0D DC 08 6B 05 60 16 5C 05
1670: 00 53 50 30 00 00 5F 16 22 24 05 00 02 00 52 50
1680: 30 00 00 78 16 22 24 05 00 03 00 3E 4E 41 4D 45
1690: 00 00 85 16 22 50 05 05 00 9C 07 49 06 CD 0A 9C
16A0: 07 D1 08 5C 05 00 4E 41 4D 45 3E 00 00 94 16 22
16B0: 49 06 A9 0A 8F 07 50 05 06 00 8F 07 5C 05 00 46
16C0: 49 4E 44 00 00 AF 16 22 C2 10 73 07 49 06 7D 05
16D0: 04 17 65 06 94 16 8F 0C 13 09 B3 06 50 05 03 00
16E0: 9C 07 7F 07 50 05 02 00 86 08 13 09 86 08 7D 05
16F0: F8 16 EF 0A 6B 05 00 17 FD 09 9C 07 73 07 FE 0A
1700: 6B 05 06 17 EF 0A 7D 05 CC 16 0B 07 5C 05 00 41
1710: 43 43 45 50 54 00 00 C7 16 22 B3 06 8F 07 DC 08
1720: B3 06 9E 0F 49 06 50 05 0D 00 48 09 7D 05 62 17
1730: 49 06 50 05 08 00 E5 09 7D 05 50 17 75 06 C1 06
1740: B3 06 5D 09 7D 05 4C 17 55 0F DC 08 6B 05 5E 17
1750: 49 06 07 0F B3 06 64 07 D1 08 B3 06 28 0A 6B 05
1760: 22 17 75 06 28 0A 50 05 00 00 8D 06 64 07 5C 05
1770: 00 30 53 50 00 00 19 17 22 78 16 F3 08 5C 05 00
1780: 49 4E 54 45 52 50 52 45 54 00 00 78 17 22 98 0B
1790: 49 06 A9 0A 26 09 7D 05 1A 18 8D 06 B3 10 38 07
17A0: 49 06 C7 16 56 06 7D 05 DA 17 0B 07 FE 10 73 07
17B0: 7D 05 D4 17 49 06 50 05 03 00 9C 07 7F 07 50 05
17C0: 01 00 86 08 7D 05 CE 17 3D 06 6B 05 D0 17 9F 11
17D0: 6B 05 D6 17 3D 06 6B 05 12 18 49 06 7F 07 E2 0C
17E0: 7D 05 FA 17 55 0D FE 10 73 07 7D 05 F6 17 50 05
17F0: 50 05 9F 11 9F 11 6B 05 12 18 E2 0F 55 6E 6B 6E
1800: 6F 77 6E 20 54 6F 6B 65 6E 3A 20 00 17 10 C7 0E
1810: A1 10 B3 10 73 07 6B 05 8E 17 75 06 75 06 5C 05
1820: 00 51 55 49 54 00 00 8D 17 22 85 16 09 09 50 05
1830: 00 00 FE 10 38 07 B6 18 36 09 7D 05 50 18 E2 0F
1840: 45 6D 70 74 79 20 53 74 61 63 6B 00 78 16 F3 08
1850: C7 0E FE 10 73 07 13 09 7D 05 65 18 E2 0F 3E 20
1860: 00 6B 05 71 18 E2 0F 63 6F 6D 70 69 6C 65 3A 20
1870: 00 1C 0B 50 05 78 00 19 17 07 10 8D 17 6B 05 36
1880: 18 00 57 4F 52 44 53 00 00 29 18 22 C2 10 73 07
1890: 49 06 7D 05 A8 18 49 06 94 16 17 10 07 10 FD 09
18A0: 9C 07 73 07 6B 05 90 18 75 06 5C 05 00 44 45 50
18B0: 54 48 00 00 8B 18 22 E8 08 78 16 8D 06 9C 07 51
18C0: 08 5C 05 00 2E 53 00 00 B6 18 22 B6 18 49 06 50
18D0: 05 00 00 A2 05 E7 18 49 06 1D 06 9C 07 9B 06 34
18E0: 10 BF 05 D7 18 14 06 75 06 5C 05 00 27 00 00 CA
18F0: 18 22 EC 11 49 06 C7 16 56 06 13 09 7D 05 1C 19
1900: E2 0F 55 6E 6B 6E 6F 77 6E 20 54 6F 6B 65 6E 3A
1910: 20 00 17 10 C7 0E A1 10 6B 05 1E 19 0B 07 5C 05
1920: 00 46 4F 52 47 45 54 00 00 F1 18 22 F1 18 49 06
1930: 94 16 DC 08 D2 10 38 07 FD 09 9C 07 73 07 C2 10
1940: 38 07 5C 05 00 49 4F 58 41 44 44 52 00 00 2B 19
1950: 22 34 05 03 00 00 49 4F 58 40 00 00 50 19 22 50
1960: 19 73 07 B0 0D 50 05 00 03 73 07 5C 05 00 49 4F
1970: 58 21 00 00 5E 19 22 50 19 73 07 B0 0D 50 05 02
1980: 03 38 07 5C 05 00 49 4F 58 53 45 54 00 00 76 19
1990: 22 50 19 73 07 B0 0D 50 05 02 03 73 07 93 08 50
19A0: 05 02 03 38 07 5C 05 00 49 4F 58 52 53 54 00 00
19B0: 90 19 22 50 19 73 07 B0 0D B2 08 50 05 02 03 73
19C0: 07 86 08 50 05 02 03 38 07 5C 05

19CB: 00
_ascii_DISKADDR: | "DISKADDR"
19CC: 44 49 53 4B 41 44 44 52 00 00 B2 19 
_func_DISKADDR:
19D8: 22 34 05 | ent _func_DOVAR  // RHI(0x1D5F), I = 0x19DB, PC = 0x534
_var_DISKADDR:
19DB: 02 00    |             // Disk address value

19DD: 00
_ascii_DISKNAME: | "DISKNAME\""
19DE: 44 49 53 4B 4E 41 4D 45 22 00 00 D8 19
19EB: 22 50 05 | ent _func_lit        // (lit)
19EE: 22 00    | 0x0022               //     '\"'
19F0: 08 12    | _func_TIBSPLIT       // TIBSPLIT
19F2: D8 19    | _func_DISKADDR       // DISKADDR
09F4: 73 07    | _func_at             // @
09F6: B0 0D    | _func_RBPexclamation // RBP!
09F8: 50 05    | _func_lit            // (lit)
09FA: 00 03    | 0x0300               //     0x0300
09FC: B3 06    | _func_OVER           // OVER
09FE: A9 0A
1A00: D1 08 39 0A 50 05 02 00 50 05 82 03 64 07 50 05
1A10: 82 03 7F 07 50 05 02 00 E5 09 7D 05 24 1A A5 0D
1A20: 6B 05 0E 1A 5C 05 00 44 49 53 4B 49 44 00 00 EB
1A30: 19 22 D8 19 73 07 B0 0D 50 05 03 00 50 05 82 03
1A40: 64 07 50 05 82 03 7F 07 50 05 03 00 E5 09 7D 05
1A50: 58 1A A5 0D 6B 05 42 1A 50 05 00 03 0F 0B 50 05
1A60: 40 00 39 0A 0F 0B 17 10 5C 05 00 44 49 53 4B 57
1A70: 53 00 00 31 1A 22 D8 19 73 07 B0 0D 50 05 80 03
1A80: 38 07 50 05 00 03 50 05 80 00 39 0A 50 05 05 00
1A90: 50 05 82 03 64 07 50 05 82 03 7F 07 50 05 05 00
1AA0: E5 09 7D 05 AC 1A A5 0D 6B 05 96 1A 5C 05 00 44
1AB0: 49 53 4B 52 53 00 00 75 1A 22 D8 19 73 07 B0 0D
1AC0: 50 05 80 03 38 07 50 05 04 00 50 05 82 03 64 07
1AD0: 50 05 82 03 7F 07 50 05 04 00 E5 09 7D 05 E6 1A
1AE0: A5 0D 6B 05 D0 1A 50 05 00 03 8D 06 50 05 80 00
1AF0: 39 0A 5C 05 00 53 41 56 45 22 00 00 B9 1A 22 EB
1B00: 19 50 05 00 05 E0 10 50 05 81 04 9C 07 50 05 07
1B10: 00 60 08 50 05 00 00 8D 05 2D 1B 49 06 1D 06 75
1B20: 1A 50 05 80 00 8F 07 BF 05 1B 1B 14 06 5C 05 00
1B30: 28 62 6C 6B 62 75 66 29 00 00 FE 1A 22 34 05 00
1B40: 00 00 28 62 6C 6B 6E 6F 29 00 00 3C 1B 22 34 05
1B50: 00 00 00 28 62 6C 6B 75 70 29 00 00 4D 1B 22 34
1B60: 05 00 00 00 46 4C 55 53 48 00 00 5E 1B 22 3C 1B
1B70: 73 07 4D 1B 73 07 DC 08 50 05 03 00 70 08 50 05
1B80: 08 00 50 05 00 00 8D 05 A0 1B 65 06 75 1A 8D 06
1B90: 50 05 80 00 8F 07 8D 06 D1 08 BF 05 8A 1B 14 06
1BA0: 81 06 50 05 00 00 5E 1B 38 07 5C 05 00 52 45 56
1BB0: 45 52 54 00 00 6D 1B 22 50 05 00 00 5E 1B 38 07
1BC0: 3C 1B 73 07 4D 1B 73 07 DC 08 50 05 03 00 70 08
1BD0: 50 05 08 00 50 05 00 00 8D 05 F2 1B 65 06 B9 1A
1BE0: 8D 06 50 05 80 00 8F 07 8D 06 D1 08 BF 05 DC 1B
1BF0: 14 06 81 06 5C 05 00 42 4C 4F 43 4B 00 00 B7 1B
1C00: 22 3C 1B 73 07 13 09 7D 05 15 1C 50 05 00 04 6A
1C10: 11 3C 1B 38 07 49 06 4D 1B 73 07 E5 09 7D 05 29
1C20: 1C 75 06 3C 1B 73 07 5C 05 4D 1B 73 07 26 09 7D
1C30: 05 35 1C 6D 1B 4D 1B 38 07 B7 1B 3C 1B 73 07 5C
1C40: 05 00 55 50 44 41 54 45 00 00 00 1C 22 50 05 01
1C50: 00 5E 1B 38 07 5C 05 00 4C 49 53 54 00 00 4C 1C
1C60: 22 00 1C C7 0E 50 05 0A 00 2B 0B 38 07 50 05 10
1C70: 00 50 05 00 00 8D 05 AD 1C 1D 06 50 05 0A 00 5D
1C80: 09 7D 05 87 1C 07 10 1D 06 34 10 50 05 40 00 50
1C90: 05 00 00 8D 05 A5 1C 49 06 7F 07 07 0F D1 08 BF
1CA0: 05 97 1C 14 06 C7 0E BF 05 79 1C 14 06 75 06 5C
1CB0: 05 00 57 49 50 45 00 00 60 1C 22 4C 1C 3C 1B 73
1CC0: 07 50 05 00 04 50 05 20 00 58 0A 5C 05 00 50 50
1CD0: 00 00 BA 1C 22 4C 1C 50 05 06 00 70 08 3C 1B 73
1CE0: 07 8F 07 49 06 50 05 40 00 50 05 20 00 58 0A 50
1CF0: 05 0D 00 08 12 18 07 A9 0A 50 05 40 00 28 0A 39
1D00: 0A 5C 05 00 4C 4F 41 44 00 00 D4 1C 22 00 1C 50
1D10: 05 00 00 1C 0B 50 05 40 00 8F 07 64 07 50 05 10
1D20: 00 50 05 00 00 8D 05 49 1D 49 06 1C 0B 50 05 40
1D30: 00 39 0A 1C 0B B3 10 38 07 1C 0B 8D 17 50 05 40
1D40: 00 8F 07 BF 05 29 1D 14 06 75 06 5C 05

1D4D: 00
_ascii_COLD:   | "COLD"
1D4E: 43 4F 4C 44 00 00 0C 1D 
_func_COLD:
1D56: 22 50 05 | ent _func_lit      // (lit)      // Read memory at 0x0000
1D59: 00 00    | 0x0000             //     0x0000
1D5B: 7F 07    | _func_Cat          // C@
1D5D: D8 19    | _func_DISKADDR     // DISKADDR   // Set DISKADDR to value
1D5F: 38 07    | _func_exclamation  // !
1D61: 50 05    | _func_lit          // (lit)      // Read memory at 0x0100
1D63: 01 00    | 0x100              //     0x0100
1D65: 7F 07    | _func_Cat          // C@
1D67: C1 0D    | _func_TERMADDR     // TERMADDR   // Set TERMADDR to value
1D69: 38 07    | _func_exclamation  // !
1D6B: C7 0E    | _func_CR           // CR
1D6D: C7 0E    | _func_CR           // CR
1D6F: E2 0F    | _func_lpdotquoterp // (.")
_str_MineOS:   | "MineOS V1.1 Initialized\0"
1D71: 4D 69 6E 65 4F 53 20 56 31 2E 31 20 49 6E 69 74 69 61 6C 69 7A 65 64 00
1D89: C7 0E    | _func_CR          // CR
1D8B: 0D 11    | 
1D8D: EF 10
1D8F: 38 07
1D91: 55 11 5E 10 E2 0F 62 79 74 65 73 20 66 72 65
1DA0: 65 2E 00 C7 0E 29 18
_var_HERE:
1DA7: 00 00    | ?
1DA9: 00 00 00 00 00 00 00
1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
